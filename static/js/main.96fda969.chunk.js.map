{"version":3,"sources":["api/api.jsx","components/NewPostForm/NewPostForm.jsx","components/PostList/PostsList.jsx","api/posts.jsx","components/NewComentForm/NewCommentForm.jsx","api/comments.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.jsx"],"names":["BASE_URL","request","url","options","a","fetch","response","ok","Error","status","statusText","json","result","NewPostForm","handleCreatePostButton","setNewPost","newPost","action","type","value","title","onChange","event","prevPost","target","body","onClick","PostsList","setPostId","useState","posts","setPosts","selectedPostId","setSelectedPostId","useEffect","then","handleDeletePostButton","postId","method","deletePost","prevPosts","filter","postToDelete","id","className","headers","JSON","stringify","addNewPost","createdPost","map","post","NewCommentForm","name","setName","email","setEmail","text","setText","handleChange","callback","onSubmit","comment","preventDefault","placeholder","PostDetails","setPost","comments","setComments","handleDeleteComment","commentId","deletePostComment","prevComments","getPostDetails","getPostComments","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96fda969.chunk.js","sourcesContent":["export const BASE_URL = 'https://bloggy-api.herokuapp.com';\n\nexport async function request(url, options) {\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n  const result = await response.json();\n  return result;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './NewPostForm.scss';\n\nexport default function NewPostForm({ handleCreatePostButton, setNewPost, newPost }) {\n  return (\n    <form\n      action=\"POST\"\n    >\n      <input\n        type=\"text\"\n        value={newPost.title}\n        onChange={(event) => setNewPost((prevPost) => ({ ...prevPost, title: event.target.value }))}\n      />\n      <input\n        type=\"text\"\n        value={newPost.body}\n        onChange={(event) => setNewPost((prevPost) => ({ ...prevPost, body: event.target.value }))}\n      />\n      <button\n        type=\"button\"\n        onClick={handleCreatePostButton}\n      >\n        Create\n      </button>\n    </form>\n  );\n}\n\nNewPostForm.propTypes = {\n  handleCreatePostButton: PropTypes.func.isRequired,\n  setNewPost: PropTypes.func.isRequired,\n  newPost: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nimport { getAllPosts, deletePost, addNewPost } from '../../api/posts';\nimport NewPostForm from '../NewPostForm/NewPostForm';\n\nexport default function PostsList({ setPostId }) {\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState('');\n  const [newPost, setNewPost] = useState({\n    title: '',\n    body: '',\n  });\n\n  useEffect(() => {\n    getAllPosts()\n      .then((result) => setPosts(result));\n  }, []);\n\n  const handleOpenButton = (postId) => {\n    setSelectedPostId(postId);\n    setPostId(postId);\n  };\n\n  const handleCloseButton = () => {\n    setSelectedPostId('');\n    setPostId(null);\n  };\n\n  const handleDeletePostButton = (postId) => {\n    deletePost(postId)\n      .then(setPosts((prevPosts) => (\n        prevPosts.filter((postToDelete) => (\n          postId !== postToDelete.id\n        ))\n      )));\n  };\n\n  const handleCreatePostButton = () => {\n    addNewPost(newPost)\n      .then((createdPost) => {\n        setPosts([...posts, createdPost]);\n        setNewPost({\n          title: '',\n          body: '',\n        });\n      });\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <NewPostForm\n        handleCreatePostButton={handleCreatePostButton}\n        setNewPost={setNewPost}\n        newPost={newPost}\n      />\n\n      <ul className=\"PostsList__list\">\n        {posts.map((post) => (\n          <li\n            key={post.id}\n            className=\"PostList__item\"\n          >\n            <div>\n              <b>\n                [Post]\n              </b>\n              {post.title || 'No title'}\n            </div>\n            {post.id !== selectedPostId ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleOpenButton(post.id)}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleCloseButton('')}\n              >\n                Close\n              </button>\n            )}\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleDeletePostButton(post.id)}\n            >\n              Delete post\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nPostsList.propTypes = {\n  setPostId: PropTypes.func.isRequired,\n};\n","import { BASE_URL, request } from './api';\n\nexport function getAllPosts() {\n  return request(`${BASE_URL}/posts`);\n}\n\nexport function deletePost(postId) {\n  return request(`${BASE_URL}/posts/${postId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function addNewPost(newPost) {\n  return request(`${BASE_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newPost),\n  });\n}\n\nexport function getPostDetails(postId) {\n  return request(`${BASE_URL}/posts/${postId}`);\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { addPostComment } from '../../api/comments';\n\nexport default function NewCommentForm({ postId }) {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n\n  const handleChange = (event, callback) => {\n    callback(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    addPostComment({\n      postId,\n      name,\n      email,\n      body: text,\n    });\n\n    setName('');\n    setEmail('');\n    setText('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      method=\"POST\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => handleChange(event, setName)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => handleChange(event, setEmail)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={text}\n          onChange={(event) => handleChange(event, setText)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n}\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  // handleAddComment: PropTypes.func.isRequired,\n};\n","import { BASE_URL, request } from './api';\n\nexport function getPostComments(postId) {\n  return request(`${BASE_URL}/comments`)\n    .then((comments) => comments.filter((comment) => (\n      postId === comment.postId\n    )));\n}\n\nexport function addPostComment(comment) {\n  return request(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n}\n\nexport function deletePostComment(commentId) {\n  return request(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostDetails.scss';\n\nimport NewCommentForm from '../NewComentForm/NewCommentForm';\n\nimport { getPostDetails } from '../../api/posts';\nimport { deletePostComment, getPostComments } from '../../api/comments';\n\nexport default function PostDetails({ postId }) {\n  const [post, setPost] = useState([]);\n  const [comments, setComments] = useState([]);\n\n  const handleDeleteComment = (commentId) => {\n    deletePostComment(commentId)\n      .then(setComments((prevComments) => (\n        prevComments.filter((comment) => (\n          postId === comment.postId\n        )))));\n  };\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then(setPost);\n    getPostComments(postId)\n      .then(setComments);\n  }, []);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.title}</p>\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n\n        <ul className=\"PostDetails__list\">\n          {comments.map((comment) => (\n            <li className=\"PostDetails__list-item\" key={comment.id}>\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => handleDeleteComment(comment.id)}\n              >\n                X\n              </button>\n              <p>{comment.body}</p>\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './styles/main.scss';\nimport PostsList from './components/PostList/PostsList';\nimport PostDetails from './components/PostDetails/PostDetails';\n\nfunction App() {\n  const [postId, setPostId] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>List of Posts</h1>\n      </header>\n\n      <main>\n        <div className=\"App__sidebar\">\n          <PostsList setPostId={setPostId} />\n        </div>\n\n        <div className=\"App__content\">\n          {postId && (\n          <PostDetails\n            postId={postId}\n          />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}